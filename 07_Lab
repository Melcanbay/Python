# Tuples
# It has similar logic to the List object. However, it does not have the built-in functions that we implement in lists. But the index logic is the same. Slicing can be done at a common point in both lists and tuples.

tuple_1 = ('Fenerbahçe', 'Galatasaray', 'Beşiktaş', 'Trabzonspor', 'Adana')
tuple_2 = (12, 35.5, 'b', 'Eagles', 'Patrios', 'Red Skins', 'Seahwak')
# We can combine tuples with each other. You can think of this like the extend() function on lists.
tuple_3 = tuple_1 + tuple_2
print(tuple_3)

# Slicing
print(tuple_3[0:3]) # output => ('Fenarbahçe', 'Galatasaray', 'Beşiktaş')
print(tuple_3[2:4]) # output => ('Beşiktaş', 'Trabzonspor')

print(tuple_3[::2]) # output => ('Fenerbahçe', 'Beşiktaş', 'Adana', 35.5, 'Eagles','Red Skins')
print(tuple_3[-1]) # output => ('Seahwak')
print(tuple_3[::-1]) # output => will write tuple_3 in reverse
print(tuple_3[::-2]) # output => ('Seahwak', 'Patrios', 'b', 12, 'Trabzonspor, 'Galatasaray')
print(tuple_3[3::-2]) # output => ('Trabzonspor', 'Galatasaray')

tuple_4 = ('Sarıyer', ('Suadiye', 'Erenköy'), ('Yeniköy', 'Bebek', ('Etiler', 'Ulus')))
print(tuple_4[2])
print(tuple_4[1][1]) # output => ('Erenköy')
print(tuple_4[2][2][0]) # output => ('Etiler')

my_family = [
     ('Melisa', 18, 'lion'),
     ('Ebru', 45, 'boss'),
     ('Feridun', 50, 'worker')
]

for x, y, z in my_family:
     print(f'Name: {x}\n'
           f'age: {y}\n'
           f'Alias: {z}')
